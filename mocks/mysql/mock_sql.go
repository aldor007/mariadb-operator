// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aldor007/mariadb-operator/mysql (interfaces: SQLRunner)

// Package mysql is a generated GoMock package.
package mysql

import (
	context "context"
	reflect "reflect"

	mysql "github.com/aldor007/mariadb-operator/mysql"
	gomock "github.com/golang/mock/gomock"
)

// MockSQLRunner is a mock of SQLRunner interface.
type MockSQLRunner struct {
	ctrl     *gomock.Controller
	recorder *MockSQLRunnerMockRecorder
}

// MockSQLRunnerMockRecorder is the mock recorder for MockSQLRunner.
type MockSQLRunnerMockRecorder struct {
	mock *MockSQLRunner
}

// NewMockSQLRunner creates a new mock instance.
func NewMockSQLRunner(ctrl *gomock.Controller) *MockSQLRunner {
	mock := &MockSQLRunner{ctrl: ctrl}
	mock.recorder = &MockSQLRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLRunner) EXPECT() *MockSQLRunnerMockRecorder {
	return m.recorder
}

// QueryExec mocks base method.
func (m *MockSQLRunner) QueryExec(arg0 context.Context, arg1 mysql.Query) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryExec", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryExec indicates an expected call of QueryExec.
func (mr *MockSQLRunnerMockRecorder) QueryExec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryExec", reflect.TypeOf((*MockSQLRunner)(nil).QueryExec), arg0, arg1)
}

// QueryRow mocks base method.
func (m *MockSQLRunner) QueryRow(arg0 context.Context, arg1 mysql.Query, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockSQLRunnerMockRecorder) QueryRow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockSQLRunner)(nil).QueryRow), varargs...)
}

// QueryRows mocks base method.
func (m *MockSQLRunner) QueryRows(arg0 context.Context, arg1 mysql.Query) (mysql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRows", arg0, arg1)
	ret0, _ := ret[0].(mysql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRows indicates an expected call of QueryRows.
func (mr *MockSQLRunnerMockRecorder) QueryRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRows", reflect.TypeOf((*MockSQLRunner)(nil).QueryRows), arg0, arg1)
}
